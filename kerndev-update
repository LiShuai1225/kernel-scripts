#!/bin/bash
set -e; set -o pipefail; source kerndev-shared.sh

output_format="%-15s\t%s\n"
repos_path="$(script_dir)/.repos"

# Functions.

# Enter $1, stash if necessary, and store previous reference in $prevref.
function enterdir()
{
	push $1

	prevref=$(git rev-parse --abbrev-ref=strict HEAD)
	# If this is 'HEAD', we can't find a matching branch so just use the
	# commit hash instead.
	[[ "$prevref" == "HEAD" ]] && prevref=$(git rev-parse HEAD)

	changed=$(git status --porcelain)
	if [[ -n "$changed" ]]; then
		git stash -q --include-untracked
		stashed=y
	fi
}

# Resore $prevref, if stashed changes, pop them.
function exitdir()
{
	git checkout -q $prevref

	if [[ -n "$stashed" ]]; then
		git stash pop -q >/dev/null
		unset stashed
	fi

	pop
}

# Update kernel tree.
#
# $1:    Directory of kernel tree.
# $2...: Branches to update.
function update()
{
	dir=$1
	shift

	enterdir $dir

	for branch in $@; do
		printf $output_format $branch $PWD

		git checkout --quiet $branch
		git pull --quiet --rebase
	done

	exitdir
}

# The .repos file is of the following format:

# <path to kernel1> branch1 branch2 ... branchN
# <path to kernel2> branch1 branch2 ... branchN
# ...
# <path to kernelN> branch1 branch2 ... branchN

[[ -f "$repos_path" ]] || fatal 'Missing .repos'

echo Updating linux git trees...

printf $output_format "BRANCH" "DIR"

while read line; do
	update $line
done < "$repos_path"

say_done
